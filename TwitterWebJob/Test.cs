using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Net.Http;
using System.Net;
using System.Security.Cryptography;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace TwitterWebJob
{
    class Test
    {
        public static void Main0(string[] args)
        {
            var mediaIds = GetMediaIds();
            var mediaIdString = "";
            foreach (var id in mediaIds)
            {
                mediaIdString += id.ToString();
                mediaIdString += ",";
            }
            mediaIdString = mediaIdString.TrimEnd(',');

            string ConsumerKey = "E4BdX6Shn32xHNX4ydpW1Kj0b";
            string Secret = "g76QnyQSi0khjuJcZ4TPcBbsKISHmh2YDhWqcylZ8CYRtiz7zf";

            var oauthConsumerKey = WebUtility.UrlEncode(ConsumerKey);
            var oauthToken = WebUtility.UrlEncode("1149458747686735872-tid82ZGH2wMp3HOQd8C3xAhcslLS9Q");
            var oauthUserSecret = WebUtility.UrlEncode("UKxVUoXN6eprZ9ZWlQlWweoQgBuJinhI5qKbGSUfn5kBT");

            var oauthNonce = WebUtility.UrlEncode(Guid.NewGuid().ToString("N"));
            var sigMethod = WebUtility.UrlEncode("HMAC-SHA1");
            var timestamp = DateTimeOffset.UtcNow.ToUnixTimeSeconds().ToString();
            var version = WebUtility.UrlEncode("1.0");

            string status = Uri.EscapeDataString("testing tweet with images");
            string encodedMediaIds = WebUtility.UrlEncode(mediaIdString);
            string baseUrl = $"https://api.twitter.com/1.1/statuses/update.json";
            
            string paramString =
                "media_ids=" + encodedMediaIds + "&" +
                "oauth_consumer_key=" + oauthConsumerKey + "&" +
                "oauth_nonce=" + oauthNonce + "&" +
                "oauth_signature_method=" + sigMethod + "&" +
                "oauth_timestamp=" + timestamp + "&" +
                "oauth_token=" + oauthToken + "&" +
                "oauth_version=" + version + "&" +
                "status=" + status;

            var signatureBaseString =
                $"POST&{WebUtility.UrlEncode(baseUrl)}&{WebUtility.UrlEncode(paramString)}";
            var signingKey = $"{Secret}&{oauthUserSecret}";
            var oauthSignature = WebActions.ShaHash(signatureBaseString, signingKey);

            var authString = "OAuth " +
                "oauth_consumer_key=" + "\"" + oauthConsumerKey + "\"" + ", " +
                "oauth_nonce=" + "\"" + oauthNonce + "\"" + ", " +
                "oauth_signature=" + "\"" + WebUtility.UrlEncode(oauthSignature) + "\"" + ", " +
                "oauth_signature_method=" + "\"" + sigMethod + "\"" + ", " +
                "oauth_timestamp=" + "\"" + timestamp + "\"" + ", " +
                "oauth_token=" + "\"" + oauthToken + "\"" + ", " +
                "oauth_version=" + "\"" + version + "\"";

            var client = new HttpClient();
            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(baseUrl + $"?media_ids={encodedMediaIds}&status={status}"),
                Method = HttpMethod.Post,
                Headers =
                {
                    { HttpRequestHeader.Authorization.ToString(), authString }
                }
            };

            var response = client.SendAsync(request).Result;
            var bp = 0;
        }

        static List<long> GetMediaIds()
        {
            string ConsumerKey = "E4BdX6Shn32xHNX4ydpW1Kj0b";
            string Secret = "g76QnyQSi0khjuJcZ4TPcBbsKISHmh2YDhWqcylZ8CYRtiz7zf";

            var oauthConsumerKey = WebUtility.UrlEncode(ConsumerKey);
            var oauthToken = WebUtility.UrlEncode("1149458747686735872-tid82ZGH2wMp3HOQd8C3xAhcslLS9Q");
            var oauthUserSecret = WebUtility.UrlEncode("UKxVUoXN6eprZ9ZWlQlWweoQgBuJinhI5qKbGSUfn5kBT");

            // TEST START

            var mediaIds = new List<long>();
            // get from api endpoint in prod
            var base64Strings = new List<string>();
            // data:image/png;base64,
            base64Strings.Add("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");

            foreach (var base64 in base64Strings)
            {
                var baseUrl = "https://upload.twitter.com/1.1/media/upload.json";
                var oauthNonce = WebUtility.UrlEncode(Guid.NewGuid().ToString("N"));
                var sigMethod = WebUtility.UrlEncode("HMAC-SHA1");
                var timestamp = DateTimeOffset.UtcNow.ToUnixTimeSeconds().ToString();
                var version = WebUtility.UrlEncode("1.0");

                var encodedData = WebUtility.UrlEncode(base64);
                var paramString =
                    "media_data=" + encodedData + "&" +
                    "oauth_consumer_key=" + oauthConsumerKey + "&" +
                    "oauth_nonce=" + oauthNonce + "&" +
                    "oauth_signature_method=" + sigMethod + "&" +
                    "oauth_timestamp=" + timestamp + "&" +
                    "oauth_token=" + oauthToken + "&" +
                    "oauth_version=" + version;

                var signatureBaseString =
                $"POST&{WebUtility.UrlEncode(baseUrl)}&{WebUtility.UrlEncode(paramString)}";
                var signingKey = $"{Secret}&{oauthUserSecret}";
                var oauthSignature = WebActions.ShaHash(signatureBaseString, signingKey);

                var authString = "OAuth " +
                    "oauth_consumer_key=" + "\"" + oauthConsumerKey + "\"" + ", " +
                    "oauth_nonce=" + "\"" + oauthNonce + "\"" + ", " +
                    "oauth_signature=" + "\"" + WebUtility.UrlEncode(oauthSignature) + "\"" + ", " +
                    "oauth_signature_method=" + "\"" + sigMethod + "\"" + ", " +
                    "oauth_timestamp=" + "\"" + timestamp + "\"" + ", " +
                    "oauth_token=" + "\"" + oauthToken + "\"" + ", " +
                    "oauth_version=" + "\"" + version + "\"";

                var body = new Dictionary<string, string>();
                body.Add("media_data", base64);
                var client = new HttpClient();

                var request = new HttpRequestMessage
                {
                    RequestUri = new Uri(baseUrl),
                    Method = HttpMethod.Post,
                    Headers =
                    {
                        { HttpRequestHeader.Authorization.ToString(), authString },
                        { "Content-Transfer-Encoding", "base64" },
                        { HttpRequestHeader.ContentType.ToString(), "application/x-www-form-urlencoded" }
                    },
                    Content = new FormUrlEncodedContent(body)
                };
                var response = client.SendAsync(request).Result;
                JObject res = JsonConvert.DeserializeObject<JObject>(response.Content.ReadAsStringAsync().Result);
                mediaIds.Add((long)res["media_id"]);
            }
            return mediaIds;
        }
    }
}
